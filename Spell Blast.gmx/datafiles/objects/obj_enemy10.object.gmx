<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy10</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp=10 move_speed=-5 fire_delay=room_speed
old_path_speed=0 field_sfx_delay=0 runup=45
normaltakeover=0 shots=3

/*
-anim speed=how fast anim time progresses
-anim time=when anim frames change
-anim_frame=the current frame being displayed
-anim cycle=animate forwards(+1) or backwards(-1)
*/
attackCLOCK=room_speed*2 attack_phase=1
anim_speed=30 anim_time=0 anim_frame=0 anim_cycle=1
start_frame=0 end_frame=2

image_speed=0 image_xscale=0.8 image_yscale=0.8

//set idle animation state.
anim_speed=20 anim_time=0 start_frame=0 end_frame=2
anim_cycle=1 anim_frame=start_frame attack_phase=1

// DX and DY are coordinate of the tip of the muzzle relative to the origin of the sprite.
DX = 93; // When this value is positive, the tip is right to the origin.
DY = 35; // When this value is positive, the tip is below the origin.

// Method b: using the equation of 2-D rotation
// No pre-calculation is needed in this case.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var con=obj_gameplay_manager,dir=0, skip=0;
var p1=0,mst=0,spd=0;

if con.game_paused=0 {path_speed=old_path_speed}
if con.game_paused=1 {path_speed=0 return 0}

if runup&gt;0 
{
   runup-- x+=move_speed
   attackCLOCK=20 fire_delay=20
}
if runup=1 {fire_delay=10}

if fire_delay&gt;0 {fire_delay--}
if attackCLOCK&gt;0 {attackCLOCK--}

if x&lt;-(room_width/10) {instance_destroy()}

//x+=move_speed
if hp&gt;6 {spd=3}
if hp&gt;3 and hp&lt;=7 {spd=9}
if hp&lt;=4 {spd=24}
image_angle+=spd dir=image_angle

//animate the enemy.
//anim_speed=0 anim_time=0 anim_frame=0 anim_cycle=0
//first, check how much time to advance the frame time.
anim_time+=findpercentvalue(room_speed,anim_speed)
//if we reached the end of an animation frame.
if anim_time&gt;=room_speed
{
  //if we HAVE NOT reached the end of the animation.
  if anim_frame!=end_frame {anim_time=0 anim_frame+=anim_cycle skip=1}
  //if we HAVE reached the end of the animation.  
  if anim_frame=end_frame and skip=0
  {
     if attack_phase=1
      { anim_time=0 anim_frame=start_frame}
      if attack_phase=2
      {       
        PlaySFX("cat shoot")
           mst = instance_create(x,y, obj_enemy10_bullet);
        with mst {direction=dir+45}
           mst = instance_create(x,y, obj_enemy10_bullet);
        with mst {direction=dir+135}
           mst = instance_create(x,y, obj_enemy10_bullet);
        with mst {direction=dir+215}
           mst = instance_create(x,y, obj_enemy10_bullet);
        with mst {direction=dir+325}
        
        anim_speed=20 anim_time=0 start_frame=0 end_frame=2
        anim_frame=start_frame anim_cycle=1 attack_phase=1
        
        if hp&gt;6 {attackCLOCK=round(room_speed*1.3)}
        if hp&gt;3 and hp&lt;=7 {attackCLOCK=round(room_speed/1.6)}
        if hp&lt;=4 {attackCLOCK=round(room_speed/2.5)}        
      }
  }
}
    
    switch (attack_phase)
    {
      //idle.
      case 1:
       if attackCLOCK=0
       {
          anim_speed=20 anim_time=0 start_frame=3 end_frame=5
          anim_frame=start_frame anim_cycle=1 attack_phase=2
          attackCLOCK=-1
       }
      break;
     //attack open.
      case 2:
     
      break;    
  }

image_index=anim_frame
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pbullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vfxm=VFX_Manager;

if runup&gt;6 {return 0}
hp-- score++

PlaySFX("player shot impact")
with (other) 
{
  //generate player projectile hitsparks.
  part_particles_create(global.Psystem, x, y, vfxm.particle_hitspark1, 10);
  part_particles_create(global.Psystem, x, y, vfxm.particle_hitspark2, 1);
  instance_destroy()
}

if hp&lt;=0
{
  score+=28
  PlaySFX("minion explode")
  ShakeCamera(13)
  //generate jellyfish death hitsparks.
  part_particles_create(global.Psystem, x+50, y+30, vfxm.prt_jelly_splat, 10);
  part_particles_create(global.Psystem, x+50, y+30, vfxm.prt_jelly_spurt, 20);
  part_particles_create(global.Psystem, x+50, y+30, vfxm.prt_jelly_ring2, 1);
  
 instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
