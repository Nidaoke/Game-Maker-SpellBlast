<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawn_time=0 max_spawn_time=room_speed/3
Lborder=30 Rborder=room_width-30
Bborder=room_height-50 game_paused=0 game_over=0
upgrade_time=0

with obj_upgrade_button
{active=0}

cam_shake_intensity=0 cam_shake_time=0
cam_shakeX=0 cam_shakeY=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var csa=1;
if upgrade_time=1 {game_paused=1}
if game_paused=1 {return 0;}

if spawn_time&gt;0 {spawn_time--}
if spawn_time=0
  {
    spawn_time=max_spawn_time+irandom_range(room_speed/4,room_speed/3)
    SpawnEnemy()
  }
  
 if cam_shake_time&gt;0
  {
    cam_shake_time--
    if cam_shake_time&lt;=room_speed {csa=1.4}
    if cam_shake_time&lt;=room_speed/2 {csa=2}
    cam_shakeX=random_range(-(cam_shake_intensity/csa),(cam_shake_intensity/csa))
    cam_shakeY=random_range(-(cam_shake_intensity/csa),(cam_shake_intensity/csa))
    
    view_xview[0]=0+cam_shakeX
    view_yview[0]=0+cam_shakeY
  }
  
 if cam_shake_time=0
  {cam_shakeX=0 cam_shakeY=0}
  
 //if view_xview[0]&lt;0 {view_xview[0]+=findpercentvalue(abs(view_xview[0]),10)}
 //if view_xview[0]&gt;0 {view_xview[0]-=findpercentvalue(abs(view_xview[0]),10)}
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hper=0
draw_set_color(c_black)
draw_rectangle(0,0,Lborder,room_height,false)
draw_rectangle(Rborder,0,room_width,room_height,false)
draw_rectangle(0,Bborder,room_width,room_height,false)
draw_set_color(c_white)
draw_line(0,Bborder+3,room_width,Bborder+3)

if upgrade_time=0
{
    //draw HP.
    hper=findtotalpercent(global.hp,global.max_hp)
    draw_sprite_ext(spr_hud_labels,6,Lborder+2,Bborder+6,1.25,1.25,0,c_white,1)
    draw_healthbar(Lborder+50,Bborder+8,Lborder+150,Bborder+18,hper,c_black,c_green,c_green,0,true,false)
    //draw level.
    draw_sprite_ext(spr_hud_labels,0,Lborder+190,Bborder+6,1.25,1.25,0,c_white,1)
    DisplayNumberSprite(global.level,Lborder+260,Bborder+6)
    //draw rank.
    draw_sprite_ext(spr_hud_labels,5,Lborder+340,Bborder+6,1.25,1.25,0,c_white,1)
    DisplayNumberSprite(global.rank,Lborder+396,Bborder+6)
    
    //draw exp.
    draw_sprite_ext(spr_hud_labels,1,Lborder+2,Bborder+23,1.25,1.25,0,c_white,1)
    DisplayNumberSprite(global.EXP,Lborder+46,Bborder+23)
    //draw expTNL.
    draw_sprite_ext(spr_hud_labels,2,Lborder+190,Bborder+23,1.25,1.25,0,c_white,1)
    DisplayNumberSprite(global.EXPTNL,Lborder+328,Bborder+23)

    //draw pause label.
    if game_paused=1
    {
      draw_set_color(c_black)
      draw_set_alpha(0.4)
      draw_rectangle(0,0,room_width,room_height,false)
      draw_sprite_ext(spr_hud_labels,7,room_width/2-(210/2),room_height/2-20,1.25,1.25,0,c_white,1)
    }   
}


if upgrade_time=1
{
   //draw upgrade label.
   draw_sprite_ext(spr_hud_labels,3,Lborder+90,Bborder+6,1.25,1.25,0,c_white,1)
}
draw_set_color(c_white)
draw_set_alpha(1)

//draw game over label.
if game_over=1
{
  draw_sprite_ext(spr_hud_labels,8,room_width/2-(210/2),room_height/2-20,1.25,1.25,0,c_white,1)
}









</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
