<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_speed=8.8 fire_delay=0 button_delay=0
image_xscale=0.6 image_yscale=0.6
blink=0 stop_input=0 joydelay=0
invincible=0 come_back=0 recovery=0
shield=0 praise=0 ud_delay=0
image_speed=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ukey,dkey,lkey,rkey,firekey,letfull=0,letterkey,oldletterkey;
var con=obj_gameplay_manager, vfxm=VFX_Manager;
var colall=0,stop=0;
var rm=room_get_name(room)
var ujoy,djoy,ljoy,rjoy, resetkey;

//player movement/shooting controls.
ukey=keyboard_check(vk_up) or gamepad_button_check(0,gp_padu)
dkey=keyboard_check(vk_down) or gamepad_button_check(0,gp_padd)
lkey=keyboard_check_pressed(vk_left) or gamepad_button_check_pressed(0,gp_padl) 
rkey=keyboard_check_pressed(vk_right) or gamepad_button_check_pressed(0,gp_padr)
resetkey=keyboard_check_pressed(ord("R"))

leftstickH=0//gamepad_axis_value(0, gp_axislh)
leftstickV=0//gamepad_axis_value(0, gp_axislv)

firekey=keyboard_check(ord("Z")) or gamepad_button_check(0,gp_face1)
letterkey=keyboard_check(ord("X")) or gamepad_button_check(0,gp_face2)
oldletterkey=false
megakey=keyboard_check_pressed(ord("C"))

if fire_delay&gt;0 {fire_delay--}
if button_delay&gt;0 {button_delay--}
if ud_delay&gt;0 {ud_delay--}

if x&gt;=280 {x=280}
if y&lt;190 {y=190}

if come_back=1 and con.game_paused=0
{
   if x&lt;280 {x+=9}
   if x&gt;=280 {x=280 come_back=0 fire_delay=0 stop_input=0 recovery=room_speed*2}
}

if (resetkey) {room_restart()}

if con.game_paused=1 {return 0;}

//generate player thrusters.
part_particles_create(global.Psystem, x-104, y-80+random(20), vfxm.prt_player_thrusters, 1); 

if come_back=1 {fire_delay=100 return 0;}

///==
if praise=1 and lives=0 and con.boss_present=1
 {recovery=30 shield=1 praise=0}

if recovery&gt;0
{
    blink++ recovery-- invincible=1
    if blink&gt;10 {blink=0}
}
if recovery=0
 {blink=0 invincible=0 visible=true}
if blink&lt;=5 {visible=true}
if blink&gt;5 {visible=false}

if stop_input=1 {return 0;}

if leftstickV&lt;-global.thumbstickDS {ukey=true}
if leftstickV&gt;global.thumbstickDS {dkey=true}

/*
action lock:
0=ship move up/down
1=ship shoot
2=choose letter left/right
3=move letter button
4=meaweapon button
*/

if con.actionLOCK[0]=0
{
  if (ukey) 
  {
    y-=move_speed ud_delay=5 
    if shield=0 {image_index=1}
  }
  if (dkey) 
  {
    y+=move_speed ud_delay=5 
    if shield=0 {image_index=2}
  }
}
if !ukey and !dkey 
{
   if shield=0 { image_index=0 }
}

//check if player's using the shield.
if shield=0 {image_speed=0 sprite_index=spr_player_ship}
if shield=1
{
  image_speed=0.5
  if (ukey) {sprite_index=spr_shielded_ship02}
  if (dkey) {sprite_index=spr_shielded_ship03}
  if !ukey and !dkey 
  { sprite_index=spr_shielded_ship01 }
}

//if the player touched the ground.
if y&gt;900
{
    y=900
    if visible=true and come_back=0 and invincible=0
    { DestroyPlayer(1) }
}

if leftstickH=0 and joydelay&gt;0
   {joydelay=0 }
   
if CheckIfAllLettersCollected()=1 and con.stop_letter_input=0 and con.matchCLOCK&gt;0 and con.stop_spawning_minions=0
 { 
   if leftstickH&lt;-global.thumbstickDS and joydelay=0
   {lkey=true joydelay=10 }
   if leftstickH&gt;global.thumbstickDS and joydelay=0
   {rkey=true joydelay=10 }
   
    if con.actionLOCK[2]=0
    {
      if (lkey) and ud_delay=0
        {
          con.tut_p3_proceed=1 MoveLetterCursor(-1,con.letcursorstate)
          if letterkey=true and con.tutorial_phase=3 
           { 
              con.tutorial_prompt=0 game_paused=0 con.tutorial_phase++
              con.stop_enemy_spawn=0 con.tutorialCLOCK=round(room_speed*3)
              actionLOCK[0]=0 actionLOCK[1]=0
           }
        }
      if (rkey) and ud_delay=0
        {
          con.tut_p3_proceed=1 MoveLetterCursor(1,con.letcursorstate)
          if letterkey=true and con.tutorial_phase=3 
           { 
              con.tutorial_prompt=0 game_paused=0 con.tutorial_phase++
              con.stop_enemy_spawn=0 con.tutorialCLOCK=round(room_speed*3)
              actionLOCK[0]=0 actionLOCK[1]=0
           }
        }
        
      if rm = "rm_tutorial" and con.tutorial_phase=2 and con.tut_p3_proceed=1 and con.tut_p3_proceed2=0
        {con.tutorialCLOCK=round(room_speed*3) con.tut_p3_proceed2=1}
    }
        
  if letterkey=true and oldletterkey=false and con.actionLOCK[3]=0
    {
      con.letcursorstate=1
      con.letselected=ds_list_find_value(global.letters_found_list,con.letcursor) 
      if con.tutorial_phase=3
      { }
    }
    
    if letterkey=true { oldletterkey=true}
          
    if letterkey=false and con.letcursorstate=1
    {con.letcursorstate=0 oldletterkey=false}
 }

if (firekey) and fire_delay=0 and come_back=0 and con.actionLOCK[1]=0
 {
    fire_delay=12
    PlaySFX("player shoot")
    ShakeCamera(4)
 
    //generate player muzzle flash.
    part_particles_create(global.Psystem, x, y-1, vfxm.prt_player_muzzle_flash, 1); 
    
    instance_create(x+200,y,obj_pbullet)
 }
 
 if (megakey) and con.actionLOCK[4]=0
 {
    instance_create(x,y,obj_megaweapon01)
 }








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_bad_touch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if shield&gt;0 
{exit;}

if visible=true and come_back=0 and invincible=0 and shield=0
{ DestroyPlayer(1) }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_letter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var letval=0, val=0, con=obj_gameplay_manager;
var toomuch=0,cv="",str="",ind=0,lc=0,lc2=0;
var rm=room_get_name(room)
var px=(other).x, py=(other).y;

with (other)
{val=value}

  letval=val
  //figure out if this letter shouldn't be added to the player's letter stock.
  cv=ConvertValueToLetter(letval)
  
  ds_list_add(global.letters_found_list, letval)    
  //check if the letter isn't needed.
  for (p=0;p&lt;ds_list_size(global.letters_found_list);p++)
   {
     if string(ds_list_find_value(global.letters_found_list,p))=str
     {lc++}
   }
  lc2=string_count( cv, con.chosen_word ) 
    
  //if the player acquired too many dupes.
  if lc+1&gt;=lc2 {toomuch=1}  
    if toomuch=1
    {
       ind=ds_list_find_index(global.letters_spawn_list, letval);
       if ind != -1 {ds_list_delete(global.letters_spawn_list,ind);}
    }
    if toomuch=0
    {
      //once a letter is found, delete it from the letters that need to be spawned.
      ind=ds_list_find_index(global.letters_spawn_list, letval);
      if ind != -1 {ds_list_delete(global.letters_spawn_list,ind);}
    }
 
if CheckIfAllLettersCollected()=1
 { con.collectCLOCK=-1 con.matchCLOCK=con.matchTIME }
 
 for (g=0;g&lt;instance_number(obj_letter_filler);g++)
 {
   with instance_find(obj_letter_filler,ds_list_size(global.letters_found_list)-1)
   {x=px y=py}
 }
 
PlaySFX("letter collect")
with (other)
{instance_destroy()}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
