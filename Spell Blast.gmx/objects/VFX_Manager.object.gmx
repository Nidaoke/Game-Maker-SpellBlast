<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set up the particle system.
global.Psystem = part_system_create();
part_system_depth(global.Psystem, -1);

//creates a particle type to be used when needed.
global.explosionpart = part_type_create();

//sets the base shape of the particle.
//part_type_sprite(global.explosionpart, spr_spark, false, false, false)
part_type_sprite(global.explosionpart,spr_explosion, true, true, false);

//==
//sets particle type properties for explosion.
part_type_scale(global.explosionpart, 1.3, 1.5);
part_type_size(global.explosionpart, 1,1.3,0,0);
part_type_life(global.explosionpart, round(room_speed*0.4), round(room_speed));
//part_type_alpha2(global.explosionpart, 1, 0.2);
part_type_speed(global.explosionpart, 0.4,0.6,0,0);
part_type_orientation(global.explosionpart, 0,0, 0,0,true);
part_type_direction(global.explosionpart, 0, 360, 0, 0);
//part_type_gravity(global.explosionpart, 0, 270);
//part_type_colour_rgb(global.explosionpart, 255,255, 180,180,30,30);

/*
PARTICLE TYPES:
pt_shape_pixel:
A 1x1 pixel. (This is the default setting.)

pt_shape_disk:
A filled circle.

pt_shape_square:
A filled square.

pt_shape_line:
An 8px wide horizontal line.

pt_shape_star:
A five-point filled star.

pt_shape_circle:
A 3px outlined circle.

pt_shape_ring:
A circle with an inward glow (looks like a bubble).

pt_shape_sphere:
A circle with an outward glow ' solid in the middle, glowing outwards.

pt_shape_flare:
A harshly glowing point (looks like an actual star in the night).

pt_shape_spark:
A spark effect ' like a star with multiple points fading out.

pt_shape_explosion:
A squarish cloud of smoke ' requires multiple colours to resemble an explosion.

pt_shape_cloud:
A thin cloud, requires up scaling and multiple particles to resemble a cloud.

pt_shape_smoke:
A smooth version of the explosion effect. Use multiple to create a smoke cloud.

pt_shape_snow:
A generic snowflake shape.

PARTICLE PARAMETERS:
set the base size of the particle:
 part_type_size(global.p1, 1, 3, 0, 0);
 set the size of the particle when created:
 part_type_scale(global.p1, 1, 1);
 part_type_colour1(global.p1, c_white);
 part_type_alpha2(global.p1, 1, 0);
 part_type_speed(global.p1, 2, 4, 0, 0);
 part_type_direction(global.p1, 0, 180, 0, 0);
 part_type_gravity(global.p1, 0.20, 270);
 part_type_orientation(global.p1, 0, 0, 0, 0, 1);
 part_type_blend(global.p1, 1);
 part_type_life(global.p1, 15, 60);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var con=0;

if instance_exists(obj_gameplay_manager)=true
{
    con=obj_gameplay_manager
    if con.game_paused=0
    {part_system_automatic_update(global.Psystem,true)}
    if con.game_paused=1
    {part_system_automatic_update(global.Psystem,false)}
}

x=view_xview[0]+32 y=view_yview[0]+32


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
destroys the VFX Manager's particle system and all
associated particle types to avoid memory leaks.
*/
part_system_destroy(global.Psystem); 
part_type_destroy(global.explosionpart); 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>42,42</point>
  </PhysicsShapePoints>
</object>
