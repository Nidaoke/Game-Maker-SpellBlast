<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursorY=0 maxY=2 button_delay=0
thumbstickDS=0.2 
life_reward=0
boss_present=0
//spawn a letter after so many enemies have been spawned.
force_letter_spawn=0
letter_spawn_delay=round(room_speed*(3+irandom(15) ))
global.force_letter_spawnMAX=5

global.boss_index=irandom(1)

TLW=0
tutorial_phase=0 tutorialCLOCK=room_speed*2
tutorial_prompt=0

tut_p3_proceed=0 tut_p3_proceed2=0
/*
global.spawn_frequency=0
global.letter_spawn_frequency=0
*/
stop_enemy_spawn=0 stop_letter_spawn=0
//stop spawning enemies after a certain time period.
stop_enemy_spawnCLOCK=-1

var rm=room_get_name(room)

/*
action lock:
0=ship move up/down
1=ship shoot
2=choose letter left/right
3=move letter button
4=megaweapon button
*/
for (p=0;p&lt;5;p++)
{ actionLOCK[p]=0 }

if rm = "rm_tutorial"
{
    for (p=0;p&lt;5;p++)
    { actionLOCK[p]=1 }
}
spawn_delay=irandom(30)
cw=0 tls=0 chosen_word=""
collect_order=0 letselected=0
letcursor=0 letcursorstate=0
letcursorlastpos=0 game_paused=0
stop_updating_letters=0
var sys=obj_system_manager;
sys.bg_scrollX=0 blink=0

correct_match=0 stop_letter_input=0
match_label=0

//cam shake stuff
cam_shake_intensity=0 cam_shake_time=0
cam_shakeX=0 cam_shakeY=0 cam_shake_fade=0.2
//view x and y
vx=room_width/2-150; //center width
vy=room_height/2-150; //center height

//where the timers+letter boxes go.
bottomHUD=room_height-240

collectTIME=round(room_speed*45)
collectCLOCK=-1 matchCLOCK=-1
boss_arrivalCLOCK=-1 boss_defeatCLOCK=-1
game_overCLOCK=-1
correct_matchCLOCK=-1

stop_spawning_minions=0

ds_list_clear(global.letters_found_list)
ds_list_clear(global.letters_spawn_list)

for (p=0;p&lt;9;p++)
{
    game_word[p]=""
    if p&lt;9
    {
      letters_arranged[p]=0
      letters_assigned[p]=0
      letters_collected[p]=0
      letters_collected_list[p]=0
      letters_collect_order[p]=0
    }
}
 
 //update player progress.
 ChangeLevelParameters()

 matchTIME=round(room_speed*(14+(4*global.matchTIMER)))
 
 //choose the word to be solved.
 if rm != "rm_tutorial" {chosen_word=string_lower(dict_randomWordLength(global.word_length))}
 if rm="rm_tutorial" {chosen_word="cage"}
 
 tls=string_length(chosen_word)
 //assign all the letters to this array.
 for (p2=0;p2&lt;tls;p2++)
 {
    lv=ConvertLetterToValue(string_char_at(chosen_word,p2+1)) 
    ds_list_add(global.letters_spawn_list, lv-1)
    
    letters_assigned[p2]=ConvertLetterToValue(string_char_at(chosen_word,p2+1))
    letters_arranged[p2]=letters_assigned[p2]
 }
 
 var scram=0;
 while (scram=0)
 {
    for (p6=0;p6&lt;2;p6++)
    {
        ds_list_shuffle(global.letters_spawn_list)
    }
    if CheckLettersScrambled()&gt;1 {scram=1 break;}
 }
 
 PlayBGM("gameplay")
 
 background_index[0]=choose(bg_gameplay01,bg_gameplay03,bg_gameplay04,bg_gameplay05);
 background_htiled[0]=true
 background_xscale[0]=2.8 background_yscale[0]=2.8
 background_alpha[0]=0.7
 
 can_pause=20
 
 var p1x=0,p1y=0, tls2=tls, bHUD=bottomHUD
 for (p2=0;p2&lt;tls;p2++)
 {
   var p3=p2
   var mst=instance_create(-900,-900, obj_letter_slot)
   with mst
   {
     index=p3
     x=(room_width/2)-(tls2*160/2)+(index*160)
     y=bHUD+70 p1x=x p1y=y
   }
   
   var mst2=instance_create(-900,-900, obj_letter_filler)
   with mst2
   {
     index=p3 x=p1x y=p1y
   }
 }
 
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var rndnum=0,rndenemy=0, rndlet, fndlet=0,iv=0, letfind;
var pausekey=0,gp_pausekey=0, pause_used=0,p1=obj_player;
var b01=0, sys=obj_system_manager;
var ukey,dkey,lkey,rkey,pause_confirmkey;
var rm=room_get_name(room)

//pause menu controls.
ukey=keyboard_check(vk_up) or gamepad_button_check(0,gp_padu)
dkey=keyboard_check(vk_down) or gamepad_button_check(0,gp_padd)
lkey=keyboard_check(vk_left) or gamepad_button_check(0,gp_padl) 
rkey=keyboard_check(vk_right) or gamepad_button_check(0,gp_padr)

leftstickH=gamepad_axis_value(0, gp_axislh)
leftstickV=gamepad_axis_value(0, gp_axislv)

tut_confirmkey=keyboard_check_pressed(ord("Z")) or gamepad_button_check_pressed(0,gp_face1)
pause_confirmkey=keyboard_check_pressed(vk_enter) or keyboard_check_pressed(ord("Z")) or gamepad_button_check_pressed(0,gp_face1) or gamepad_button_check_pressed(0,gp_start)

//puase the gameplay.
pausekey=keyboard_check_pressed(vk_enter) or gamepad_button_check_pressed(0,gp_start)

/*
if global.gamepad_enabled[0]=true
{gp_pausekey=gamepad_button_check_pressed(0,gp_start) }
*/

if can_pause&gt;0 and rm != "rm_tutorial" {can_pause--}
if can_pause=0 and rm != "rm_tutorial"
{
   if (pausekey) and button_delay=0 {pause_used=1}
   if pause_used=1
   {
     game_paused=ToggleValue(game_paused) 
     if game_paused=1 {cursorY=0 button_delay=15}
   }
}

//tutorial stuff.
if rm = "rm_tutorial"
{
    //tutorial controls.
    if tutorialCLOCK&gt;-1 {tutorialCLOCK--}
    if tutorialCLOCK=0
    {
       if tutorial_phase=2 and tut_p3_proceed2=1 
       {tutorial_phase=3 actionLOCK[3]=0}
       button_delay=round(room_speed/2) tutorial_prompt=1
       if tutorial_phase&lt;2 or tutorial_phase=4 {game_paused=1}
    }
    
    if tutorial_prompt=1
    {
        if (tut_confirmkey) and button_delay=0
        {
           //tutorialCLOCK=room_speed
           //enabled/disable actions on specific tutorial phases.
           switch (tutorial_phase)
            {
             case 0:
               game_paused=0 tutorial_prompt=0 
               stop_enemy_spawn=0 actionLOCK[0]=0 actionLOCK[1]=0
               stop_enemy_spawnCLOCK=round(room_speed*10)
               tutorial_phase++
             break;
             case 1:
               game_paused=0 tutorial_prompt=0
               stop_enemy_spawn=1 stop_letter_spawn=0
               tutorial_phase++
             break;
             case 4:
               game_paused=0 tutorial_prompt=0
               actionLOCK[0]=0 actionLOCK[1]=0 actionLOCK[2]=0 actionLOCK[3]=0
             break;
            }
        }
    }
    
   //tutorial events that occur automatically when triggered.
   //for phase 1.
   if stop_enemy_spawnCLOCK&gt;-1 {stop_enemy_spawnCLOCK--}
   if stop_enemy_spawnCLOCK=0 {stop_enemy_spawn=1 tutorialCLOCK=round(room_speed*3.2) }
   
   //for phase 2.
   if CheckIfAllLettersCollected()=1 and tutorial_phase=2 and tutorial_prompt=0 and tut_p3_proceed=0 and tut_p3_proceed2=0
   {
      button_delay=round(room_speed/2) tutorial_prompt=1
      actionLOCK[0]=1 actionLOCK[1]=1 actionLOCK[2]=0
      tut_p3_proceed=0 tut_p3_proceed2=0
   }
}

//pause menu controls.
if button_delay&gt;0 {button_delay--}

if game_paused=1
{
   if leftstickV&lt;-global.thumbstickDS {ukey=true}
   if leftstickV&gt;global.thumbstickDS {dkey=true}
    
   if (ukey) and button_delay=0
    { button_delay=12 cursorY-- if cursorY&lt;0 {cursorY=maxY} }
   if (dkey) and button_delay=0
    { button_delay=12 cursorY++ if cursorY&gt;maxY {cursorY=0} }
     
   if (pause_confirmkey) and button_delay=0
    {
      if cursorY=0 {game_paused=0}
      //if cursorY=1 {room_goto(rm_tutorial)}
      if cursorY=2 
      {
         part_particles_clear(global.Psystem)
         part_particles_clear(global.STARFIELDsystem)
         room_goto(rm_titlescreen)
      }
    }
}
 
if game_paused=1 {return 0;}

blink++ if blink&gt;9 {blink=0}

//shake camera
 if cam_shake_intensity&gt;0 {cam_shake_intensity-=cam_shake_fade}
 cam_shakeX=random_range(-cam_shake_intensity,cam_shake_intensity)
 cam_shakeY=random_range(-cam_shake_intensity,cam_shake_intensity)

 if cam_shake_intensity&lt;0 {cam_shake_intensity=0}  
 if cam_shake_intensity=0 {cam_shakeX=0 cam_shakeY=0}
        
  view_xview[0]=cam_shakeX view_yview[0]=cam_shakeY
  
if collectCLOCK&gt;-1 {collectCLOCK--}

if rm!="rm_tutorial" and matchCLOCK&gt;-1
{matchCLOCK--}
if rm="rm_tutorial" and matchCLOCK&gt;-1 and (tutorial_phase&gt;=4 and tutorial_prompt=0) 
{matchCLOCK--}

if boss_arrivalCLOCK&gt;-1 {boss_arrivalCLOCK--}
if boss_defeatCLOCK&gt;-1 {boss_present=0 boss_defeatCLOCK--}
if game_overCLOCK&gt;-1 {game_overCLOCK--}
if game_overCLOCK&gt;0 {can_pause=1000}
if correct_matchCLOCK&gt;0 {correct_matchCLOCK--}
if letter_spawn_delay&gt;0 {letter_spawn_delay--}

if boss_defeatCLOCK=0 
{
  if rm!="rm_tutorial"
  { lives++ global.sublevel++ ChangeLevelParameters() room_restart() }

  if rm="rm_tutorial"
  {global.tutorial_lock=0 global.sublevel=0 global.world=0 room_goto(rm_titlescreen)}
}

if game_overCLOCK=0
{
   part_particles_clear(global.Psystem)
   part_particles_clear(global.STARFIELDsystem)
   room_goto(rm_titlescreen)
}

if matchCLOCK=0
{
  if stop_spawning_minions=0
  {
    if CheckIfPlayerMatchedAllLetters()=0 {correct_match=0}
    stop_spawning_minions=1 boss_arrivalCLOCK=room_speed*4 stop_letter_input=1
    ShakeCamera(25)
  }
}
if boss_arrivalCLOCK=0
{
  boss_present=1
  if global.boss_index=0
   {instance_create(room_width,(room_height/2)+80, obj_boss01)}
  if global.boss_index=1
   {instance_create(room_width,70,obj_boss02)}
}

if spawn_delay&gt;0 {spawn_delay--}
if stop_updating_letters&gt;0 {stop_updating_letters--}
if spawn_delay&lt;=0 and stop_spawning_minions=0
{
   spawn_delay=round(room_speed*3)-(global.spawn_frequency*15)
  
   if rm= "rm_tutorial" and tutorial_phase=2
   {force_letter_spawn=global.force_letter_spawnMAX spawn_delay=room_speed}
   
   if stop_enemy_spawn=0
   {
       force_letter_spawn++ rndenemy=irandom(2)
       if rndenemy=0 {instance_create(room_width+64,irandom_range(30,800),obj_enemy02)}
       if rndenemy=1 {instance_create(room_width+64,irandom_range(30,632),obj_enemy03)}
       if rndenemy=2 {instance_create(room_width+64,irandom_range(30,632),obj_enemy04)}
   }   
}

if letter_spawn_delay=0 and stop_letter_spawn=0 and instance_number(obj_letter)&lt;1    
{   
   if rm = "rm_tutorial"
    { 
       force_letter_spawn=0 letter_spawn_delay=round(room_speed*(1+irandom(12)) )
       if ds_list_size(global.letters_spawn_list)&gt;0
        {
           var target=ds_list_find_value(global.letters_spawn_list,0)
           var let=instance_create(room_width+36,irandom_range(30,800),obj_letter)
           with let { value=target }
        }
    }

   //==
  
 if rm != "rm_tutorial"
  {
       force_letter_spawn=0 letter_spawn_delay=round(room_speed*(1+irandom(12)) )
       if ds_list_size(global.letters_spawn_list)&gt;0
        {
           var target=ds_list_find_value(global.letters_spawn_list,irandom( ds_list_size(global.letters_spawn_list)-1) )
           var dup=0
           for (g=0;g&lt;instance_number(obj_letter);g++)
            {
              with (instance_find(obj_letter, g))
              {
                if value=target { dup++ }
              }
            }
           
           if dup=0 
           {
             var let=instance_create(room_width+36,irandom_range(30,800),obj_letter)
             with let { value=target }
           }
        }   
  }
 //== 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var total_letter_width=(140*string_length(chosen_word))+1
var num=0, num2=0, p1=obj_player, sc2=0;
var boss=0, sys=obj_system_manager,con=obj_gameplay_manager;
var rm=room_get_name(room)

draw_set_color(c_gray)
draw_set_font(font0)

draw_sprite(spr_player_life,0,35,-2)
DrawSpriteText("x"+string(lives),120,2,0.7) 
//DisplayNumberSprite(lives,300,0)

var scorestr=string(score)
draw_sprite_ext(spr_scorebar,0,722,10, 0.8,0.8, 0,c_white,1)
DrawSpriteText(scorestr,1150-(70*string_length(scorestr)),12,0.7) 
//DisplayNumberSprite(score,(room_width/2)+100,0)

//display "letters" label.
//draw_sprite_ext(spr_HUD_labels,2, (room_width/2)-201,bottomHUD+12, 0.6,0.6, 0,c_white,1) 
sc2=GetSpriteTextWidth("letters",0.35)
DrawSpriteText("letters",(room_width/2)-(sc2/1.5),bottomHUD+55,0.35)

//draw_text(10,200, string(chosen_word))
//notify the player that they've solved the word correctly.
if instance_exists(obj_boss01)=false and matchCLOCK&gt;0
 {
   if stop_letter_input=0 and CheckIfAllLettersCollected()=1 and CheckIfPlayerMatchedAllLetters()=1 and correct_match=0
   {p1.praise=1 correct_match=1 match_label=0 correct_matchCLOCK=room_speed*2 stop_letter_input=1 }
 }

//notify the player that they've solved the word INcorrectly.
if con.boss_arrivalCLOCK&gt;0 and con.correct_match=0
 {
   match_label=1
   p1.praise=0 correct_match=0 correct_matchCLOCK=room_speed*3 stop_letter_input=1 
 }

//display correct or INcorrect notification.
if correct_matchCLOCK&gt;0 and game_overCLOCK&lt;=0
 { 
    //if correct.
    if match_label=0 
    {
      sc2=GetSpriteTextWidth("correct!",0.8)
      DrawSpriteText("correct!",(room_width/2)-(sc2/1.5),bottomHUD-150,0.8) 
    }
    //if INcorrect.
    if match_label=1
    {
      sc2=GetSpriteTextWidth("wrong!",0.8)
      DrawSpriteText("wrong!",(room_width/2)-(sc2/1.5),bottomHUD-150,0.8) 
    }
 }
 
 //display the letters in the correct arrangement. DEBUG 
 /*
  for (p3=0;p3&lt;tls;p3++)
   {
    //num=ds_list_find_value(global.letters_spawn_list,p3)        
    num=letters_assigned[p3]
    draw_sprite_ext(spr_letters,num-1,400+(p3*140),bottomHUD-100, 1,1, 0,c_white,1)   
  }  
*/

       //display timer.    
 if CheckIfAllLettersCollected()=1 and stop_spawning_minions=0
    {  
       var tpc=findtotalpercent(matchCLOCK,round(matchTIME));
       var tpc2=findpercentvalue(1880,tpc);

       //+80
       draw_sprite_ext(spr_timerbar,0, 10,805, 1,1, 0,c_white,1)
       draw_sprite_part_ext(spr_timerfiller,0, 40,0,tpc2,100, 50,805, 1,1,c_white,1)
       sc2=GetSpriteTextWidth("timer",0.4)
       DrawSpriteText("timer",(room_width/2)-(sc2/1.5),830,0.4) 
    }
     
 var col=0;
 /*
 //display letterbox cursor.     
 if stop_letter_input=0 and CheckIfAllLettersCollected()=1
  {
     if letcursorstate=0
     {
        if blink&lt;5 {col=65535}
        if blink&gt;=4 {col=make_color_rgb(125,95,25)}
        draw_sprite_ext(spr_letterbox,1,TLW+(letcursor*140),bottomHUD+90, 1,1,0,col,1)
        //draw_rectangle(TLW+(letcursor*140),bottomHUD+90,TLW+(letcursor*140)+128,bottomHUD+90+128,false)
     }
     if letcursorstate=1
     {
        if blink&lt;5 {col=65280}
        if blink&gt;=4 {col=make_color_rgb(25,125,25)}
        draw_sprite_ext(spr_letterbox,1,TLW+(letcursor*140),bottomHUD+90, 1,1,0,col,1)
        //draw_rectangle(TLW+(letcursor*140),bottomHUD+90,TLW+(letcursor*140)+128,bottomHUD+90+128,false)
      }
  }
 */


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
