<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawn_delay=0 cw=0 tls=0 chosen_word=""
collect_order=0 letselected=0
letcursor=0 letcursorstate=0
letcursorlastpos=0 game_paused=0
stop_updating_letters=0

can_pause=30

collectTIME=round(room_speed*45)
matchTIME=round(room_speed*25)

stop_spawning_minions=0

ds_list_clear(global.letters_found_list)

//str1 = "Hello World";
//str2 = string_char_at(str1, 7); 
 
for (p=0;p&lt;9;p++)
{
    game_word[p]=""
    if p&lt;9
    {
      letters_arranged[p]=0
      letters_assigned[p]=0
      letters_collected[p]=0
      letters_collected_list[p]=0
      letters_collect_order[p]=0
    }
}

 game_word[0]="cage" game_word[1]="shape"
 game_word[2]="graze" game_word[3]="psycho"
 game_word[4]="shrine" game_word[5]="stripe"
 game_word[6]="knight" game_word[7]="wreck"
 
 //select a word to use.
 cw=irandom_range(0,7) chosen_word=game_word[cw]
 tls=string_length(chosen_word)
 //assign all the letters to this array.
  for (p2=0;p2&lt;tls;p2++)
  {
     letters_assigned[p2]=ConvertLetterToValue(string_char_at(chosen_word,p2+1))
     letters_arranged[p2]=letters_assigned[p2]
  }
 //=string_pos(substr, str);
 //=string_delete(chosen_word,index,1);

alarm[0]=collectTIME
  
  
  
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(room_width,0, obj_boss01)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var p1=obj_player;
p1.stop_input=1 DestroyPlayer(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var rndnum=0,rndenemy=0, rndlet, fndlet=0,iv=0;
var pausekey=0,gp_pausekey=0;

//puase the gameplay.
pausekey=keyboard_check_pressed(vk_enter)
if global.gamepad_enabled[0]=true
{
  gp_pausekey=gamepad_button_check_pressed(0,gp_start)
}

if can_pause&gt;0 {can_pause--}
if can_pause=0
{
 if (pausekey) or (gp_pausekey)
 { game_paused=ToggleValue(game_paused) } 
}

if game_paused=1 {return 0;}
if spawn_delay&gt;0 {spawn_delay--}
if stop_updating_letters&gt;0 {stop_updating_letters--}
if spawn_delay&lt;=0 and stop_spawning_minions=0
{
   spawn_delay=room_speed/1.8
   rndnum=irandom(2)
   if rndnum!=2
   {
       rndenemy=irandom(2)
       if rndenemy=0 {instance_create(room_width+36,irandom_range(10,room_height-30),obj_enemy01)}
       if rndenemy=1 {instance_create(room_width+36,irandom_range(10,room_height-30),obj_enemy02)}
       if rndenemy=2 {instance_create(room_width+36,irandom_range(10,room_height-30),obj_enemy03)}
   }
   if rndnum=2 and instance_number(obj_letter)=0
   {     
       while (fndlet=0)
        {
            //select which letter to spawn.
            rndlet=irandom(tls-1)
            //see if that letter has been collected already.
            //if it hasn't, spawn it.
            if letters_collected[rndlet]=0
            {
              var target=letters_assigned[rndlet]-1
              var let=instance_create(room_width+36,irandom_range(10,room_height-30),obj_letter)
              with let
              {
               value=target fndlet=1
              }
            }
            
            iv=CheckIfAllLettersCollected()
            iv=tls {break;}
        }
   }
}

if CheckIfAllLettersCollected()=1 and CheckIfPlayerMatchedAllLetters()=1 and stop_spawning_minions=0
{
    stop_spawning_minions=1 alarm[0]=-1 alarm[1]=room_speed*2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var total_letter_width=(67*string_length(chosen_word))+1
var num=0, num2=0;
            
draw_set_color(c_gray)
draw_set_font(font0)

draw_text(11,11,"LIVES: "+string(lives))
draw_set_halign(fa_center)
draw_text(room_width/2+1,11,"SCORE: "+string(score))
draw_text(room_width/2+1,room_height-99,"LETTERS ")
draw_set_halign(fa_left)

draw_set_color(c_white)

draw_text(10,10,"LIVES: "+string(lives))
draw_set_halign(fa_center)
draw_text(room_width/2,10,"SCORE: "+string(score))
draw_text(room_width/2,room_height-100,"LETTERS ")

var TLW=room_width/2-(total_letter_width/2)
for (p=0;p&lt;string_length(chosen_word);p++)
  {
    num=0
    draw_rectangle(TLW+(p*70),room_height-75,TLW+(p*70)+64,room_height-75+64,true)
   /*
    draw_sprite(spr_letters,letters_assigned[p]-1,TLW+(p*43),room_height-140)
    
    draw_set_color(c_blue)
    draw_text(TLW+(p*43)+10,room_height-140,string(letters_assigned[p]))
    draw_set_color(c_white)   
    */
    
    if letters_collected[p]&gt;0 
    {
    /*
      draw_set_color(c_blue)
      draw_text(TLW+(letters_collect_order[p]*43)+10,room_height-75,string(letters_collected_list[p]))
      draw_set_color(c_white)
      */
    }
  }
  
  //display the collected letters.
  for (p2=0;p2&lt;ds_list_size(global.letters_found_list);p2++)
  {
    num=ds_list_find_value(global.letters_found_list,p2)
    
    //draw_sprite(spr_letters,letters_assigned[p]-1,TLW+(letters_collect_order[p]*43),room_height-75)
    draw_sprite(spr_letters,num,TLW+(p2*70),room_height-75)   
     /*
    draw_set_color(c_blue)
    draw_text(TLW+(p2*43)+10,room_height-75,string(num))
    draw_set_color(c_white) 
    */  
   }
  
     
 if CheckIfAllLettersCollected()=0
 {
     //display timer.
     draw_set_color(c_gray)
     draw_text(room_width/2,room_height-180,"TIME")//+string(alarm[0]))
     draw_set_color(c_white)
     draw_text(room_width/2,room_height-180,"TIME")//+string(alarm[0]))
     var tpc=findtotalpercent(alarm[0],round(collectTIME));
     
     draw_healthbar(100,room_height-150,room_width-100,room_height-156,tpc, c_black, c_white,c_white,0,true,true)
 }
       
 if CheckIfAllLettersCollected()=1 and CheckIfPlayerMatchedAllLetters()=0
 {
       //display timer.
       draw_set_color(c_gray)
       draw_text(room_width/2,room_height-180,"TIME")//+string(alarm[0]))
       draw_set_color(c_white)
       draw_text(room_width/2,room_height-180,"TIME")//+string(alarm[0]))
       var tpc=findtotalpercent(alarm[0],round(matchTIME));
       
       draw_set_color(c_orange)
       draw_healthbar(100,room_height-150,room_width-100,room_height-156,tpc, c_black, c_orange,c_orange,0,true,true)
     
     if letcursorstate=0
     {
        draw_set_color(c_yellow)
        draw_rectangle(TLW+(letcursor*70),room_height-75,TLW+(letcursor*70)+64,room_height-75+64,true)
        draw_rectangle(TLW+(letcursor*70)+2,room_height-73,TLW+(letcursor*70)+64-2,room_height-75+62,true)
     }
     if letcursorstate=1
     {
        draw_set_color(c_lime)
        draw_rectangle(TLW+(letcursor*70),room_height-75,TLW+(letcursor*70)+64,room_height-75+64,true)
        draw_rectangle(TLW+(letcursor*70)+2,room_height-73,TLW+(letcursor*70)+64-2,room_height-75+62,true)
     }
 }
   
draw_set_halign(fa_left)

if game_paused=1
{
   draw_set_halign(fa_center)
   draw_set_color(c_black) draw_set_alpha(0.3)
   draw_rectangle(0,0,view_wview[0],view_hview[0],true)
   draw_set_color(c_white)
   draw_text(room_width/2,room_height/2-30,"GAME IS PAUSED")
   draw_set_alpha(1)
   draw_set_halign(fa_left)
     
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
