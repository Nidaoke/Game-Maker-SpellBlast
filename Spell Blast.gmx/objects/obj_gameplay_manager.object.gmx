<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursorY=0 maxY=2 button_delay=0

//spawn a letter after so many enemies have been spawned.
force_letter_spawn=0
global.force_letter_spawnMAX=5

TLW=0
tutorial_phase=0 tutorialCLOCK=room_speed*2
tutorial_prompt=0

tut_p3_proceed=0 tut_p3_proceed2=0
/*
global.spawn_frequency=0
global.letter_spawn_frequency=0
*/
stop_enemy_spawn=0 stop_letter_spawn=0
//stop spawning enemies after a certain time period.
stop_enemy_spawnCLOCK=-1

var rm=room_get_name(room)

/*
action lock:
0=ship move up/down
1=ship shoot
2=choose letter left/right
3=move letter button
4=megaweapon button
*/
for (p=0;p&lt;5;p++)
{ actionLOCK[p]=0 }

if rm = "rm_tutorial"
{
    for (p=0;p&lt;5;p++)
    { actionLOCK[p]=1 }
}
spawn_delay=0 cw=0 tls=0 chosen_word=""
collect_order=0 letselected=0
letcursor=0 letcursorstate=0
letcursorlastpos=0 game_paused=0
stop_updating_letters=0
var sys=obj_system_manager;
sys.bg_scrollX=0 blink=0

correct_match=0 stop_letter_input=0
match_label=0

//cam shake stuff
cam_shake_intensity=0 cam_shake_time=0
cam_shakeX=0 cam_shakeY=0

//where the timers+letter boxes go.
bottomHUD=room_height-240

collectTIME=round(room_speed*45)
matchTIME=round(room_speed*20)
collectCLOCK=-1 matchCLOCK=-1
boss_arrivalCLOCK=-1 boss_defeatCLOCK=-1
game_overCLOCK=-1
correct_matchCLOCK=-1

stop_spawning_minions=0

ds_list_clear(global.letters_found_list)

//str1 = "Hello World";
//str2 = string_char_at(str1, 7); 
 
for (p=0;p&lt;9;p++)
{
    game_word[p]=""
    if p&lt;9
    {
      letters_arranged[p]=0
      letters_assigned[p]=0
      letters_collected[p]=0
      letters_collected_list[p]=0
      letters_collect_order[p]=0
    }
}

 //choose the word to be solved.
 if rm != "rm_tutorial" {chosen_word=string_lower(dict_randomWordLength(6))}
 if rm="rm_tutorial" {chosen_word="cage"}
 
 tls=string_length(chosen_word)
 //assign all the letters to this array.
 for (p2=0;p2&lt;tls;p2++)
 {
    letters_assigned[p2]=ConvertLetterToValue(string_char_at(chosen_word,p2+1))
    letters_arranged[p2]=letters_assigned[p2]
 }

 PlayBGM("gameplay")
 
 background_index[0]=choose(bg_gameplay01,bg_gameplay02,bg_gameplay03,bg_gameplay04,bg_gameplay05);
 background_htiled[0]=true
 background_xscale[0]=6 background_yscale[0]=6
 background_hspeed[0]=-0.03 background_hspeed[1]=-0.7
 background_alpha[0]=0.7
 
 can_pause=20
 if rm="rm_tutorial"
 {
    global.force_letter_spawMAX=4
    global.spawn_frequency=2 global.letter_spawn_frequency=7
    stop_enemy_spawn=1 stop_letter_spawn=1 game_paused=1 
 }
 
 for (p2=0;p2&lt;tls;p2++)
 {
   var p3=p2
   var mst=instance_create(-900,-900, obj_letter_slot)
   with mst
   {index=p3}
   
   var mst2=instance_create(-900,-900, obj_letter_filler)
   with mst2
   {index=p3}
 }
  
  
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var rndnum=0,rndenemy=0, rndlet, fndlet=0,iv=0;
var pausekey=0,gp_pausekey=0, pause_used=0,p1=obj_player;
var b01=0, sys=obj_system_manager;
var pause_ukey,pause_dkey,pause_confirmkey;
var rm=room_get_name(room)

pause_ukey=keyboard_check(vk_up)
pause_dkey=keyboard_check(vk_down)
pause_confirmkey=keyboard_check(ord("Z"))

//puase the gameplay.
pausekey=keyboard_check_pressed(vk_enter)
if global.gamepad_enabled[0]=true
{
  gp_pausekey=gamepad_button_check_pressed(0,gp_start)
}

if can_pause&gt;0 and rm != "rm_tutorial" {can_pause--}
if can_pause=0 and rm != "rm_tutorial"
{
   if (pausekey) {pause_used=1}
   if (gp_pausekey) {pause_used=1}
   if pause_used=1
   {
     game_paused=ToggleValue(game_paused) 
     if game_paused=1 {cursorY=0}
   }
}

//tutorial stuff.
if rm = "rm_tutorial"
{
    //tutorial controls.
    if tutorialCLOCK&gt;-1 {tutorialCLOCK--}
    if tutorialCLOCK=0
    {
       if tutorial_phase=2 and tut_p3_proceed2=1 
       {tutorial_phase=3 actionLOCK[3]=0}
       button_delay=round(room_speed/2) tutorial_prompt=1
       if tutorial_phase&lt;2 or tutorial_phase=4 {game_paused=1}
    }
    
    if tutorial_prompt=1
    {
        if (pause_confirmkey) and button_delay=0
        {
           //tutorialCLOCK=room_speed
           //enabled/disable actions on specific tutorial phases.
           switch (tutorial_phase)
            {
             case 0:
               game_paused=0 tutorial_prompt=0 
               stop_enemy_spawn=0 actionLOCK[0]=0 actionLOCK[1]=0
               stop_enemy_spawnCLOCK=round(room_speed*10)
               tutorial_phase++
             break;             
             case 1:
               game_paused=0 tutorial_prompt=0
               stop_enemy_spawn=1 stop_letter_spawn=0
               tutorial_phase++
             break;
             case 4:
               game_paused=0 tutorial_prompt=0
             break;
            }   
        }
    }
    
   //tutorial events that occur automatically when triggered.
   //for phase 1.
   if stop_enemy_spawnCLOCK&gt;-1 {stop_enemy_spawnCLOCK--}
   if stop_enemy_spawnCLOCK=0 {stop_enemy_spawn=1 tutorialCLOCK=round(room_speed*3.2) }
    
   //for phase 2.
   if CheckIfAllLettersCollected()=1 and tutorial_phase=2 and tutorial_prompt=0 and tut_p3_proceed=0 and tut_p3_proceed2=0
   {
      button_delay=round(room_speed/2) tutorial_prompt=1
      actionLOCK[0]=1 actionLOCK[1]=1 actionLOCK[2]=0
      tut_p3_proceed=0 tut_p3_proceed2=0
   }
    
}
//pause menu controls.
if button_delay&gt;0 {button_delay--}
if game_paused=1
{
   if (pause_ukey) and button_delay=0
    { button_delay=12 cursorY-- if cursorY&lt;0 {cursorY=maxY} }
   if (pause_dkey) and button_delay=0
    { button_delay=12 cursorY++ if cursorY&gt;maxY {cursorY=0} }
     
   if (pause_confirmkey) and button_delay=0
    {
      if cursorY=0 {game_paused=0}
      //if cursorY=1 {room_goto(rm_tutorial)}
      if cursorY=2 
      {
         part_particles_clear(global.Psystem)
         part_particles_clear(global.STARFIELDsystem)
         room_goto(rm_titlescreen)
      }
    }
}
 
if game_paused=1 {return 0;}

blink++ if blink&gt;9 {blink=0}

//shake camera.
 if cam_shake_time&gt;0
  {
    cam_shake_time--
    if cam_shake_time&lt;=round(room_speed) {csa=1.4}
    if cam_shake_time&lt;=round(room_speed/2) {csa=2}
    cam_shakeX=random_range(-(cam_shake_intensity/csa),(cam_shake_intensity/csa))
    cam_shakeY=random_range(-(cam_shake_intensity/csa),(cam_shake_intensity/csa))
  }
  
 if cam_shake_time&lt;1 {cam_shake_time=0}
 if cam_shake_time=0
  {cam_shakeX=0 cam_shakeY=0}
        
  view_xview[0]=0+cam_shakeX
  view_yview[0]=0+cam_shakeY
    
if collectCLOCK&gt;-1 {collectCLOCK--}
if matchCLOCK&gt;-1 and (tutorial_phase&gt;=4 and tutorial_prompt=0) {matchCLOCK--}
if boss_arrivalCLOCK&gt;-1 {boss_arrivalCLOCK--}
if boss_defeatCLOCK&gt;-1 {boss_defeatCLOCK--}
if game_overCLOCK&gt;-1 {game_overCLOCK--}
if game_overCLOCK&gt;0 {can_pause=1000}
if correct_matchCLOCK&gt;0 {correct_matchCLOCK--}
  
if boss_defeatCLOCK=0 
{
  if sys.level=0 {sys.level=1 sys.tutorial=1 sys.level++ room_restart() exit;}
  if sys.level=1 {sys.tutorial=0 sys.level=0 room_goto(rm_titlescreen) exit;}
}
if game_overCLOCK=0
{
   part_particles_clear(global.Psystem)
   part_particles_clear(global.STARFIELDsystem)
   room_goto(rm_titlescreen)
}
      
if matchCLOCK=0
{
  if stop_spawning_minions=0
  {
    if CheckIfPlayerMatchedAllLetters()=0 {correct_match=0}
    stop_spawning_minions=1 boss_arrivalCLOCK=room_speed*5 stop_letter_input=1
    ShakeCamera(40,room_speed*5)
  }
}
if boss_arrivalCLOCK=0
{
   instance_create(room_width,(room_height/2)+80, obj_boss01)
}

if spawn_delay&gt;0 {spawn_delay--}
if stop_updating_letters&gt;0 {stop_updating_letters--}
if spawn_delay&lt;=0 and stop_spawning_minions=0
{
   spawn_delay=round(room_speed*3)-(global.spawn_frequency*20)
  
   rndnum=irandom(20)
   if force_letter_spawn&gt;=global.force_letter_spawnMAX and stop_letter_spawn=0
   {rndnum=1 force_letter_spawn=0}
   
   if rm= "rm_tutorial" and tutorial_phase=2
   {force_letter_spawn=global.force_letter_spawnMAX spawn_delay=room_speed}
    
   if rndnum!=1 and stop_enemy_spawn=0
   {
       force_letter_spawn++
       rndenemy=irandom(2)
       if rndenemy=0 {instance_create(room_width+8,irandom_range(30,800),obj_enemy02)}
       if rndenemy=1 {instance_create(room_width+8,irandom_range(30,632),obj_enemy03)}
       if rndenemy=2 {instance_create(room_width+8,irandom_range(30,632),obj_enemy04)}
   }
   if rndnum=1 and stop_letter_spawn=0 and instance_number(obj_letter)=0
   {     
       while (fndlet=0)
        {
            //select which letter to spawn.
            rndlet=irandom(tls-1)
            //see if that letter has been collected already.
            //if it hasn't, spawn it.
            if letters_collected[rndlet]=0
            {
              var target=letters_assigned[rndlet]-1
              var let=instance_create(room_width+36,irandom_range(30,800),obj_letter)
              with let
              { value=target fndlet=1 }
            }

            iv=CheckIfAllLettersCollected()
            iv=tls {break;}
        }
   }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var total_letter_width=(140*string_length(chosen_word))+1
var num=0, num2=0, p1=obj_player, sc2=0;
var boss=0, sys=obj_system_manager,con=obj_gameplay_manager;
var rm=room_get_name(room)

draw_set_color(c_gray)
draw_set_font(font0)

//draw_sprite_ext(spr_HUD_labels,3, 5,5, 0.6,0.6, 0,c_white,1)
DrawSpriteText("lives:",5,2,0.5) 
DisplayNumberSprite(lives,290,2)

//draw_sprite_ext(spr_HUD_labels,5, (room_width/2)-200,5, 0.6,0.6, 0,c_white,1)
DrawSpriteText("score:",(room_width/2)-200,2,0.5) 
DisplayNumberSprite(score,(room_width/2)+100,2)

//display "letters" label.
//draw_sprite_ext(spr_HUD_labels,2, (room_width/2)-201,bottomHUD+12, 0.6,0.6, 0,c_white,1) 
sc2=GetSpriteTextWidth("letters",0.5)
DrawSpriteText("letters",(room_width/2)-(sc2/1.5),bottomHUD+12,0.5) 

//draw_text(10,200, string(chosen_word))
//notify the player that they've solved the word correctly.
if instance_exists(obj_boss01)=false and con.boss_arrivalCLOCK&lt;1
 {
   if stop_letter_input=0 and CheckIfAllLettersCollected()=1 and CheckIfPlayerMatchedAllLetters()=1 and correct_match=0
   {p1.praise=1 correct_match=1 match_label=0 correct_matchCLOCK=room_speed*3 stop_letter_input=1 }
 }

//notify the player that they've solved the word INcorrectly.
if con.boss_arrivalCLOCK&gt;0 and con.correct_match=0
 {
   match_label=1
   p1.praise=0 correct_match=0 correct_matchCLOCK=room_speed*3 stop_letter_input=1 
 }

//display correct or INcorrect notification.
 if correct_matchCLOCK&gt;0 and game_overCLOCK=0
 { 
    //if correct.
    if match_label=0 
    {
      sc2=GetSpriteTextWidth("correct!",0.8)
      DrawSpriteText("correct!",(room_width/2)-(sc2/1.5),bottomHUD-340,0.8) 
    }
    //if INcorrect.
    if match_label=1 
    {
      sc2=GetSpriteTextWidth("wrong!",0.8)
      DrawSpriteText("wrong!",(room_width/2)-(sc2/1.5),bottomHUD-340,0.8) 
    }
 }
 
for (p=0;p&lt;string_length(chosen_word);p++)
  {
    num=0
    //128+12
   // draw_sprite(spr_letterbox,0,TLW+(p*140),bottomHUD+90)
  }
  
  //display the collected letters.
 if CheckIfAllLettersCollected()=1 and game_paused=0
 {
    for (p2=0;p2&lt;ds_list_size(global.letters_found_list);p2++)
     {
      num=ds_list_find_value(global.letters_found_list,p2)
        
      //draw_sprite_ext(spr_letters,num,TLW+(p2*140),bottomHUD+90, 1,1, 0,c_white,1)   
    }
  }
     
 if CheckIfAllLettersCollected()=0
 {
    //display the collected letters.
    for (p2=0;p2&lt;ds_list_size(global.letters_found_list);p2++)
     {
      num=ds_list_find_value(global.letters_found_list,p2)
        
      //draw_sprite_ext(spr_letters,num,TLW+(p2*140),bottomHUD+90, 1,1, 0,c_white,1)   
    }
 }

 //if CheckIfAllLettersCollected()=1 and CheckIfPlayerMatchedAllLetters()=0
 if CheckIfAllLettersCollected()=1 and stop_spawning_minions=0
    {
       //display timer.
       sc2=GetSpriteTextWidth("time",0.5)
       DrawSpriteText("time", (room_width/2)-(sc2/1.5),bottomHUD-56,0.5) 
       //draw_sprite_ext(spr_HUD_labels,6, (room_width/2)-(220/2),bottomHUD-56, 0.6,0.6, 0,c_white,1)
      
       var tpc=findtotalpercent(matchCLOCK,round(matchTIME));
       
       draw_set_color(c_orange)
       draw_healthbar(100,bottomHUD-10,room_width-100,bottomHUD-2,tpc, c_black, c_orange,c_orange,0,true,true)
     }
     
     var col=0;
 //display letterbox cursor.     
 if stop_letter_input=0 and CheckIfAllLettersCollected()=1
  {
     if letcursorstate=0
     {
        if blink&lt;5 {col=65535}
        if blink&gt;=4 {col=make_color_rgb(125,95,25)}
        draw_sprite_ext(spr_letterbox,1,TLW+(letcursor*140),bottomHUD+90, 1,1,0,col,1)
        //draw_rectangle(TLW+(letcursor*140),bottomHUD+90,TLW+(letcursor*140)+128,bottomHUD+90+128,false)
     }
     if letcursorstate=1
     {
        if blink&lt;5 {col=65280}
        if blink&gt;=4 {col=make_color_rgb(25,125,25)}
        draw_sprite_ext(spr_letterbox,1,TLW+(letcursor*140),bottomHUD+90, 1,1,0,col,1)
        //draw_rectangle(TLW+(letcursor*140),bottomHUD+90,TLW+(letcursor*140)+128,bottomHUD+90+128,false)
      }
  }
   
draw_set_alpha(1)
draw_set_halign(fa_left)

if boss_arrivalCLOCK&gt;0
{
   //display "get ready!" label.
   sc2=GetSpriteTextWidth("get ready!",0.8)
   DrawSpriteText("get ready!", (room_width/2)-(sc2/1.5),room_height/2-100,0.8) 
   //draw_sprite_ext(spr_HUD_labels,10, (room_width/2)-(473/2),room_height/2-100, 0.6,0.6, 0,c_white,1)
}
if boss_defeatCLOCK&gt;0
{
  if sys.level=0
  { 
    //display "level complete" label.
    sc2=GetSpriteTextWidth("level complete!",0.8)
    DrawSpriteText("level complete!", (room_width/2)-(sc2/1.5),room_height/2-100,0.8) 
    //draw_sprite_ext(spr_HUD_labels,12, (room_width/2)-(702/2),room_height/2-100, 0.6,0.6, 0,c_white,1)
  }
  
  if sys.level=1
  {
    //display "you win!" label.
    sc2=GetSpriteTextWidth("you win!",0.8)    
    DrawSpriteText("you win!", (room_width/2)-(sc2/1.5),room_height/2-100,0.8) 
    //draw_sprite_ext(spr_HUD_labels,7, (room_width/2)-(702/2),room_height/2-100, 0.6,0.6, 0,c_white,1)
  }
}
if game_overCLOCK&gt;0
{
   //display "game over" label.
   sc2=GetSpriteTextWidth("game over!",0.8)    
   DrawSpriteText("game over!",(room_width/2)-(sc2/1.5),room_height/2-100,0.8) 
   //draw_sprite_ext(spr_HUD_labels,0, (room_width/2)-(473/2),room_height/2-100, 0.6,0.6, 0,c_white,1)
}

if game_paused=1 and rm != "rm_tutorial"
{
   draw_set_color(c_black) draw_set_alpha(0.4)
   draw_rectangle(0,0,view_wview[0],view_hview[0],false)
   draw_set_alpha(1)
   draw_set_color(c_white)
  
   //display "game is paused" label.
   sc2=GetSpriteTextWidth("game is paused",0.8)    
   DrawSpriteText("game is paused",(room_width/2)-(sc2/1.5),200,0.8) 
   //draw_sprite_ext(spr_HUD_labels,1, (room_width/2)-(514/2),200, 0.6,0.6, 0,c_white,1)
    
   draw_set_color(c_white)
   DrawSpriteText("resume game",450,480,0.5) 
   DrawSpriteText("options",450,560,0.5)
   DrawSpriteText("go to title screen",450,640,0.5)
     
   draw_arrow(390,520+(cursorY*80), 440,520+(cursorY*80),64)
}

if rm = "rm_tutorial"
{
    if tutorial_phase=0 and tutorialCLOCK&gt;0
    {
       draw_set_color(c_white)
       sc2=GetSpriteTextWidth("tutorial",0.5)
       DrawSpriteText("tutorial",(room_width/2)-(sc2/1.5),300,0.5)
    }
    
    if tutorial_prompt=1
    {
        draw_set_color(c_dkgray)
        draw_rectangle(200,70,room_width-220,room_height-240,false)    
        draw_set_color(c_white)
        
        if tutorial_phase=0
        {
           sc2=GetSpriteTextWidth("move up or down with",0.38)    
           DrawSpriteText("move up or down with",(room_width/2)-(sc2/1.6),90,0.38)           
           draw_sprite(spr_control_icons,0,(room_width/2)-(164/3.5),140)
                    
           sc2=GetSpriteTextWidth("fire bullets at enemies with",0.38)    
           DrawSpriteText("fire bullets at enemies with",(room_width/2)-(sc2/1.7),260,0.38)
           draw_sprite(spr_control_icons,9,(room_width/2)-(164/1.2),310)         
             
           sc2=GetSpriteTextWidth("do not touch the ground below!", 0.38)    
           DrawSpriteText("do not touch the ground below!",(room_width/2)-(sc2/1.7),420,0.38)
           
           sc2=GetSpriteTextWidth("press the fire button to continue",0.4)  
           DrawSpriteText("press the fire button to continue",(room_width/2)-(sc2/1.8),room_height-310,0.4)
           
        }
       if tutorial_phase=1
        {
           sc2=GetSpriteTextWidth("collect letters once they appear", 0.38)    
           DrawSpriteText("collect letters once they appear",(room_width/2)-(sc2/1.7),90,0.38)
           draw_sprite(spr_control_icons,11,(room_width/2)-(164),140)
           
           sc2=GetSpriteTextWidth("do not shoot letters or you", 0.38)    
           DrawSpriteText("do not shoot letters or you",(room_width/2)-(sc2/1.7),260,0.38)
          
           sc2=GetSpriteTextWidth("will lose a life!", 0.38)
           DrawSpriteText("will lose a life!",(room_width/2)-(sc2/1.7),310,0.38)
           
           sc2=GetSpriteTextWidth("press the fire button to continue",0.4)  
           DrawSpriteText("press the fire button to continue",(room_width/2)-(sc2/1.8),room_height-310,0.4)
          
       }      
      if tutorial_phase=2
       {
          sc2=GetSpriteTextWidth("when you have collected all", 0.38)    
          DrawSpriteText("when you have collected all",(room_width/2)-(sc2/1.7),90,0.38)

          sc2=GetSpriteTextWidth("the letters, you have to solve", 0.38)    
          DrawSpriteText("the letters, you have to solve",(room_width/2)-(sc2/1.7),140,0.38)

          sc2=GetSpriteTextWidth("the scrambled word before time", 0.38)
          DrawSpriteText("the scrambled word before time",(room_width/2)-(sc2/1.7),190,0.38)
         
          sc2=GetSpriteTextWidth("runs out. press the left or right", 0.38)
          DrawSpriteText("runs out. press the left or right",(room_width/2)-(sc2/1.7),240,0.38)
   
          sc2=GetSpriteTextWidth("arrow keys, dpad or thumbstick", 0.38)    
          DrawSpriteText("arrow keys, dpad or thumbstick",(room_width/2)-(sc2/1.7),290,0.38)

          sc2=GetSpriteTextWidth("to move the yellow cursor at", 0.38)    
          DrawSpriteText("to move the yellow cursor at",(room_width/2)-(sc2/1.7),340,0.38)
         
          sc2=GetSpriteTextWidth("the bottom of the screen.", 0.38)    
          DrawSpriteText("the bottom of the screen.",(room_width/2)-(sc2/1.7),390,0.38)
          draw_sprite(spr_control_icons,1,(room_width/2)-(164/3.5),445)
           
          sc2=GetSpriteTextWidth("try it now!", 0.38)    
          DrawSpriteText("try it now!",(room_width/2)-(sc2/1.7),570,0.38)

       }
       
      if tutorial_phase=3
       {
          sc2=GetSpriteTextWidth("to move a letter around, press", 0.38)    
          DrawSpriteText("to move a letter around, press",(room_width/2)-(sc2/1.7),90,0.38)

          sc2=GetSpriteTextWidth("and hold the x key, b button or", 0.38)    
          DrawSpriteText("and hold the x key, b button or",(room_width/2)-(sc2/1.7),140,0.38)
          
          sc2=GetSpriteTextWidth("circle button, then press left or", 0.38)    
          DrawSpriteText("circle button, then press left or",(room_width/2)-(sc2/1.7),190,0.38)
        
          sc2=GetSpriteTextWidth("right to move the desired letter.", 0.38)    
          DrawSpriteText("right to move the desired letter.",(room_width/2)-(sc2/1.7),240,0.38)
        
          draw_sprite(spr_control_icons,10,(room_width/2)-(164/1.2),300)
           
          sc2=GetSpriteTextWidth("try it now!", 0.38)    
          DrawSpriteText("try it now!",(room_width/2)-(sc2/1.7),420,0.38)
          
       }    
              
      if tutorial_phase=4
       {
          sc2=GetSpriteTextWidth("do not forget to shoot incoming", 0.38)    
          DrawSpriteText("do not forget to shoot incoming",(room_width/2)-(sc2/1.7),90,0.38)
        
          sc2=GetSpriteTextWidth("enemies while you solve the word!", 0.38)    
          DrawSpriteText("enemies while you solve the word!",(room_width/2)-(sc2/1.7),140,0.38)
        
          sc2=GetSpriteTextWidth("you will be notified when you", 0.38)    
          DrawSpriteText("you will be notified when you",(room_width/2)-(sc2/1.7),190,0.38)
        
          sc2=GetSpriteTextWidth("have solved the word correctly.", 0.38)    
          DrawSpriteText("have solved the word correctly.",(room_width/2)-(sc2/1.7),240,0.38)
                  
          sc2=GetSpriteTextWidth("press the fire button to continue",0.4)  
          DrawSpriteText("press the fire button to continue",(room_width/2)-(sc2/1.8),room_height-360,0.4)
         
       }
    }
      
    draw_set_font(font0) draw_set_color(c_white)
    draw_text((room_width/2),580, "pr"+string(tutorial_prompt)+" ph"+string(tutorial_phase)+" "+string(tutorialCLOCK))
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
