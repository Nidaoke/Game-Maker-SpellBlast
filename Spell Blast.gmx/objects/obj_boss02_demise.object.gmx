<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss02_state02</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp=36 Xspeed=-5 Yspeed=0 move_speed=5 arrivalCLOCK=0
phase=0 attack_phase=1 fire_delay=0 attack_count=0
attackTIME=room_speed*2 attackCLOCK=attackTIME
attackCLOCK2=0

critical_attackTIME=round(room_speed/4)
boss_state=0 damageCLOCK=0 originX=0
damagedfirst=0

/*
-anim speed=how fast anim time progresses
-anim time=when anim frames change
-anim_frame=the current frame being displayed
-anim cycle=animate forwards(+1) or backwards(-1)
*/

/*
attack phases:
1. idle(frames 0-2)
2. attack blowhole(frames 3-5)
3. bite attack(frames 6-8)
4. transform(frames 6-8 on sprite 2)
5. move(frames 2-6 on sprite 2)
*/

image_speed=0 image_index=0
image_xscale=1.7 image_yscale=1.4
arrivalCLOCK=round(room_speed*3)
attackTIME=room_speed*6 attackCLOCK=attackTIME

//set idle animation state.
anim_speed=15 anim_time=0 anim_cycle=1
start_frame=0 end_frame=2 anim_frame=start_frame


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var con=obj_gameplay_manager,new_phase=-1, skip=0;
var p1=0, head_angle=0, mst=0, skip=0,head_angle=0;
var vfxm=VFX_Manager;

     //switch to unicorn emerging state.
     if boss_state=2 and attack_phase!=7
      {
         Xspeed=0 Yspeed=0
         ShakeCamera(50) 
         sprite_index=spr_boss02_state02
         anim_speed=5 anim_time=0 start_frame=6 end_frame=8
         anim_frame=start_frame attack_phase=7
         //instance_create(x,y,obj_boss02_final)
      }
      
if con.game_paused=1
{ return 0;}

if boss_state=2
{
    //generate demise VFX.
    //part_particles_create(global.Psystem, x, y, vfxm.prt_boss02_demise1,1)
    //part_particles_create(global.Psystem, x, y, vfxm.prt_boss02_demise2,1)
    //generate unicorn emergence VFX.
    part_particles_create(global.Psystem, x+130, y+200, vfxm.prt_boss02_birth,2)
}
if arrivalCLOCK&gt;-1 {arrivalCLOCK-- path_speed=0}
if arrivalCLOCK=0
 {
    attackCLOCK=attackTIME originX=x Xspeed=0 Yspeed=0
    mst=instance_create(x,y,obj_boss02_weakspot)
    with mst {part=1}
 }

x+=Xspeed y+=Yspeed
if arrivalCLOCK&gt;0 {return 0}

if attackCLOCK&gt;0 {attackCLOCK--}
if attackCLOCK2&gt;0 {attackCLOCK2--}

   //head tracking.
   if instance_exists(obj_player)=true
   {
     p1=obj_player;
     head_angle=point_direction(p1.x-100,p1.y-70,x,y) 
   }
   
//shoot laser.
if attackCLOCK2=0
{
  attackCLOCK2=round(room_speed*3.7)
  var bs=0
  PlaySFX("boss shoot")
  var mst=instance_create(x+100,y+60,obj_boss02_laser)
  with mst
  {laser_type=bs direction=head_angle image_angle=direction}
}

if damageCLOCK=0
{
    image_blend=c_white
    if boss_state=0 {sprite_index=spr_boss02_state01 }
}
if damageCLOCK&gt;0 {damageCLOCK-- image_blend=c_orange}

//animate the enemy.
//anim_speed=0 anim_time=0 anim_frame=0 anim_cycle=0
//first, check how much time to advance the frame time.
/*
attack phases:
1. idle(frames 0-2)
2. attack blowhole(frames 3-5)
3. bite attack(frames 6-8)
4. transform(frames 6-8 on sprite 2)
*/

anim_time+=round(findpercentvalue(room_speed,anim_speed))
//if we reached the end of an animation frame.
if anim_time&gt;=room_speed
{
  //if we HAVE NOT reached the end of the animation.
  if anim_frame != end_frame {anim_time=0 anim_frame+=anim_cycle skip=1} 
  //if we HAVE reached the end of the animation.
  if anim_frame=end_frame and skip=0
  {
       switch (attack_phase)
         {
           //idle state.
           case 1:
            anim_time=0 anim_frame=start_frame
            if attackCLOCK=0
             {
                 attackCLOCK=-1
                 var ch=0
                   //set AI/animation state.
                   ch=boss_state
                   if ch=0
                   {
                       //set blowhole anim state.
                       anim_speed=15 anim_time=0 anim_cycle=1
                       start_frame=0 end_frame=0        
                       attack_phase=4 anim_frame=start_frame
                       attackCLOCK=round(room_speed*1.6)
                   }
                   if ch=1
                   {
                       //set bite approach anim state.
                       sprite_index=spr_boss02_state02
                       anim_speed=20 anim_time=0 start_frame=3 end_frame=5                   
                       anim_frame=start_frame image_index=start_frame
                       anim_cycle=1 attack_phase=2 Xspeed=-14
                   }
              }
            break;
            //===
            //FOR REFERENCE
            //bite approach state.
            case 2: 
             anim_time=0 anim_frame=start_frame
            break;
            //bite retreat state.
            case 3: 
             anim_time=0 anim_frame=start_frame
            break;
            //blowhole state.
            case 4: 
              //go to delayed blowhole shoot state.
               anim_speed=8 anim_time=0 anim_cycle=1
               start_frame=5 end_frame=5
               attack_phase=5 anim_frame=start_frame
               attackCLOCK=round(room_speed/4)
            break;
            
           //delayed blowhole shoot state.
            case 5: 
               if attackCLOCK=0
               {             
                 //return to idle
                   anim_speed=15 anim_time=0 anim_cycle=1
                   start_frame=0 end_frame=2
                   attack_phase=1 anim_frame=start_frame
                   attackCLOCK=round(room_speed*1.1)
               }
            break;
            
            //defeat state.
            case 6:
             start_frame=0 end_frame=0 
             anim_time=0 anim_frame=start_frame
             sprite_index=spr_boss02_state02
             instance_create(x,y,obj_boss02_final)
            break;
         }
   }
}

//check state data.
  //check bite approach state.
  if attack_phase=2 and x&lt;700 and Xspeed&lt;0
  {  
    //set idle animation state/bite retreat movement.
    attack_phase=3 Xspeed=3 
    sprite_index=spr_boss02_state03
    anim_speed=20 anim_time=0 start_frame=6
    end_frame=8 anim_frame=start_frame image_index=start_frame
  }
 //check bite retreat state.
 if attack_phase=3 and x&gt;originX and Xspeed&gt;0 
 { 
    attack_phase=1 attackCLOCK=round(room_speed*2.4)
    x=originX Xspeed=0
 }
//
image_index=anim_frame

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_color(c_white)

draw_text(x-100,y-100,"ph"+string(attack_phase)+", f"+string(anim_frame)+", t"+string(anim_time))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
