<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.letters_found_list=ds_list_create()
global.letters_spawn_list=ds_list_create()

bg_scrollX=0 starfield_delay=0
tutorial_lock=0 level=0

global.thumbstickDS=0.2 

global.force_letter_spawnMAX=5
global.spawn_frequency=0
global.letter_spawn_frequency=0

//sublevel=individual levels, world=group of levels
//with a specific word count
global.world=0
global.sublevel=0

global.gamepad_support = gamepad_is_supported();
for (p=0;p&lt;4;p++)
{
  global.gamepad_enabled[p]=0
}

var gp_num = gamepad_get_device_count();
 for (var i = 0; i &lt; gp_num; i++;)
   {
    if gamepad_is_connected(i)
    {global.gamepad_enabled[i] = true}
     else
     {global.gamepad_enabled[i] = false;}
   }

audio_channel_num(16)

// call the dictionary initialization
dict_init();

// return a random word of a specified letter and length
// set the length to -1 for a word of a random length
//show_debug_message("Random word: "+ string(dict_randomWordLetter("a",7)));

// change the random seed
random_set_seed(randomize());

// allow one step for the dictionary to import before using any functions
alarm[0]=5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*wordToCheck = choose("programming", "dog", "cat", "asdf"); // the word to check for validity (not case-sensitive)
wordResult = dict_isValid(wordToCheck); // the actual check which will return either true or false

// an example of what can be done with the result
switch(wordResult){
    case(false): show_debug_message("'" + string(wordToCheck) + "' is an invalid word"); break;
    case(true): show_debug_message("'" + string(wordToCheck) + "' is a valid word"); break;
}

// return a random word of a specified length
show_debug_message("Random word: " + string(dict_randomWordLength(5)));
/*dict_randomWordLength(irandom_range(2,global.dict_maxLength));*/

// return a random word of a specified letter and length
// set the length to -1 for a word of a random length
//show_debug_message("Random word: "+ string(dict_randomWordLetter("a",7)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var exitgamekey=0, con=0, stars=0;
var vfxm=VFX_Manager;

//closes the game.
exitgamekey=keyboard_check_pressed(vk_escape) or gamepad_button_check_pressed(0,gp_select)

if (exitgamekey) {game_end()}

if instance_exists(obj_gameplay_manager)=true
{
   con=obj_gameplay_manager;
   if con.game_paused=1 {return 0}
   
   if starfield_delay&gt;0 {starfield_delay--}   
   if starfield_delay=0
   {
      starfield_delay=room_speed/1.5 stars=irandom_range(2,8)
      //generate starfield effect.
      for (p=0;p&lt;stars;p++)
      {part_particles_create(global.STARFIELDsystem, room_width+70, irandom_range(10,room_height-100), vfxm.prt_starfield, 1); }
   }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(global.letters_found_list)
ds_list_destroy(global.letters_spawn_list)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var rm=room_get_name(room),sc2=0;
draw_set_font(font0)
draw_set_color(c_white)

if rm="rm_titlescreen"
  {
    draw_sprite_ext(spr_titleBG01,0, 0,0, 1.5,1.5, 0,c_white,1)   
    draw_sprite(spr_titlecard,0, (room_width/2),round(room_height/6))
    sc2=GetSpriteTextWidth("press start",0.7)
    DrawSpriteText("press start",(room_width/2)-(sc2/1.75),room_height/1.8,0.7)
    //draw_sprite_ext(spr_HUD_labels,4, (room_width/2)-(536/1.8),room_height/1.8, 0.6,0.6, 0,c_white,1)
  }
  
if rm="rm_gameplay"
  {
    draw_set_color(make_color_rgb(190,190,190))
    //draw_sprite_ext(spr_gameplayBG01,0, bg_scrollX,0, 4,4, 0,c_white,1)  
    //draw_background_tiled_area(bg_ground_tile,0,32,0,room_height-256,room_width,room_height)
  }
 
   draw_set_color(c_white)
 
 
 
 
 
 
 
 
 
 
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
