<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (p=0;p&lt;4;p++)
{
  xplus[p]=0 yplus[p]=0
}

for (p2=0;p2&lt;7;p2++)
{
 ex_word[p2]=""
}

ex_word[0]="c" ex_word[1]="a"
ex_word[2]="k" ex_word[3]="e"
//ex_word[4]="e" ex_word[5]="t"

mode=0 button_delay=0 button_speed=3
bottomHUD=room_height-240
/*
 var p1x=0,p1y=0, tls2=4, bHUD=bottomHUD
 for (p2=0;p2&lt;tls2;p2++)
 {
   var p3=p2
   var mst=instance_create(-900,-900, obj_hudlineup_letter_slot)
   with mst
   {
     index=p3
     x=(room_width/2)-(tls2*160/2)+(index*160)
     y=bHUD+70 p1x=x p1y=y
   }
   
   var ew=ex_word[p2]
   var mst2=instance_create(-900,-900, obj_hudlineup_letter_filler)
   with mst2
   {
     index=p3 x=p1x y=p1y
     value=ConvertCharToValue(ew)
   }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ukey,dkey,lkey,rkey;
var mode1,mode2,mode3;

mode1=keyboard_check(ord("1"))
mode2=keyboard_check(ord("2"))
mode3=keyboard_check(ord("3"))
mode4=keyboard_check(ord("4"))
spdkey=keyboard_check(vk_control)

ukey=keyboard_check(vk_up)
dkey=keyboard_check(vk_down)
lkey=keyboard_check(vk_left)
rkey=keyboard_check(vk_right)

if button_delay&gt;0 {button_delay--}

if !spdkey {button_speed=3}
if (spdkey) {button_speed=0}
 
    if (ukey) and button_delay=0 
    { yplus[mode]-- button_delay=button_speed}
    if (dkey) and button_delay=0 
    { yplus[mode]++ button_delay=button_speed}
    if (lkey) and button_delay=0 
    { xplus[mode]-- button_delay=button_speed}
    if (rkey) and button_delay=0 
    { xplus[mode]++ button_delay=button_speed}
    
    if (mode1) and button_delay=0 
    {mode=0 button_delay=button_speed}
    if (mode2) and button_delay=0 
    {mode=1 button_delay=button_speed}
    if (mode3) and button_delay=0 
    {mode=2 button_delay=button_speed}
    if (mode4) and button_delay=0 
    {mode=3 button_delay=button_speed}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
draw_set_font(font0)

var scorestr=string(12744)
draw_sprite_ext(spr_scorebar,0,722,16, 0.8,0.8, 0,c_white,1)
DrawSpriteText(scorestr,1130-(70*string_length(scorestr)),22,0.7) 

draw_sprite(spr_player_life,0,35,8)
DrawSpriteText("x3",120,12,0.7)

//display "letters" label.
sc2=GetSpriteTextWidth("letters",0.35)
DrawSpriteText("letters",(room_width/2)-(sc2/1.5),bottomHUD+55,0.35)
 
//mode/data display.
/*
if mode=0
{draw_text(200,room_height/2,"mode:"+string(mode)+" xp:"+string(xplus[0])+" yp:"+string(yplus[0]))}
if mode=1
{draw_text(200,room_height/2,"mode:"+string(mode)+" xp:"+string(xplus[1])+" yp:bottomHUD-"+string(bottomHUD-yplus[1]))}
if mode=2
{draw_text(200,room_height/2,"mode:"+string(mode)+" xp:"+string(xplus[2])+" yp:bottomHUD-"+string(bottomHUD-yplus[2]))}
if mode=3
{draw_text(200,room_height/2,"mode:"+string(mode)+" xp:"+string(xplus[3])+" yp:bottomHUD-"+string(bottomHUD-yplus[3]))}
*/
/*
       //display timer.    
       var tpc=findtotalpercent( 10,100 );
       var tpc2=findpercentvalue(1880,tpc);

       //+80
       draw_sprite_ext(spr_timerbar,0, 10,805, 1,1, 0,c_white,1)
       draw_sprite_part_ext(spr_timerfiller,0, 40,0,tpc2,100, 50,805, 1,1,c_white,1)
       sc2=GetSpriteTextWidth("timer",0.4)
       DrawSpriteText("timer",(room_width/2)-(sc2/1.5),830,0.4) 
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
