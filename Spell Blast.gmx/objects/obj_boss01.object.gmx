<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss01_state01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp=36 Xspeed=-8 Yspeed=0 move_speed=5 arrivalCLOCK=0
phase=0 attack_phase=1 fire_delay=0
attackTIME=room_speed*1 attackCLOCK=attackTIME
critical_attackTIME=round(room_speed/4)
boss_state=0 damageCLOCK=0
/*
-anim speed=how fast anim time progresses
-anim time=when anim frames change
-anim_frame=the current frame being displayed
-anim cycle=animate forwards(+1) or backwards(-1)
*/
anim_speed=30 anim_time=0 anim_frame=0 anim_cycle=1
start_frame=0 end_frame=2

/*
attack phases:
1. idle(frames 0-2)
2. attack open(frames 3-7)
3. charge+laser shot(frames 8-10)
4. attack close -&gt;idle(frames 3-7 in reverse, so 7-3)
5. phase 3 to 4 then back to 3(gun is last weakpoint)
*/

image_speed=0 image_xscale=0.9 image_yscale=0.9

arrivalCLOCK=round(room_speed*0.9)

//set idle animation state.
anim_speed=25 anim_time=0 anim_frame=0 anim_cycle=1
start_frame=0 end_frame=2

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var con=obj_gameplay_manager,new_phase=-1, skip=0;
var p1=0, head_angle=0;

if con.game_paused=1 {return 0;}

if arrivalCLOCK&gt;-1 {arrivalCLOCK--}
if arrivalCLOCK=0 {Xspeed=0 Yspeed=choose(-1,1)}

if damageCLOCK=0
{
    if boss_state=0 {sprite_index=spr_boss01_state01 mask_index=spr_boss01_state01 }
    if boss_state=1 {sprite_index=spr_boss01_state02 mask_index=spr_boss01_state02 }
    if boss_state=2 {sprite_index=spr_boss01_state03 mask_index=spr_boss01_state03 }
    if boss_state=3 {sprite_index=spr_boss01_state04 mask_index=-1}
}
if damageCLOCK&gt;0 {damageCLOCK-- sprite_index=spr_boss01_damaged}

if boss_state&lt;3
{x+=Xspeed y+=round(Yspeed*move_speed)}

if Xspeed=0
{
   //head tracking.
   if instance_exists(obj_player)=true
   {
     p1=obj_player;
     head_angle=point_direction(p1.x,p1.y,x,y) 
     image_angle=head_angle
   }
   if attackCLOCK&gt;0 {attackCLOCK--}
   if y&lt;150 {Yspeed=1}
   if y&gt;room_height-270 {Yspeed=-1}
} 

//animate the enemy.
//anim_speed=0 anim_time=0 anim_frame=0 anim_cycle=0
//first, check how much time to advance the frame time.
/*
attack phases:
1. idle(frames 0-2)
2. attack open(frames 3-7)
3. charge+laser shot(frames 8-10)
4. attack close -&gt;idle(frames 3-7 in reverse, so 7-3)
5. phase 3 to 4 then back to 3(gun is last weakpoint)
*/
anim_time+=findpercentvalue(room_speed,anim_speed)
//if we reached the end of an animation frame.
if anim_time&gt;=room_speed
{
  //if we HAVE reached the end of the animation.  
  if anim_frame=end_frame
  {
    //idle.
    if attack_phase=1 
    {
       if attackCLOCK&gt;0 {anim_time=0 anim_frame=start_frame skip=1}
       if attackCLOCK=0 
       { 
          //set attack open animation state.
          anim_speed=30 anim_time=0 start_frame=3 end_frame=7
          anim_frame=start_frame anim_cycle=1 new_phase=2 
          skip=1
       }
    }
    //attack open.
    if attack_phase=2
    {
        //set laser charge animation state.
        anim_speed=30 anim_time=0 start_frame=8 end_frame=10 
        anim_frame=start_frame anim_cycle=1 new_phase=3
        skip=1
    }
    //shoot laser.
    if attack_phase=3
    {
        //shoot laser.
        if boss_state&lt;3
        {
        PlaySFX("boss shoot")
          var mst=instance_create(x,y,obj_boss01_laser)
          with mst
          {direction=head_angle image_angle=direction}
        }
        if boss_state=2
        {
          //go back to jaw open critical state.
          anim_speed=30 anim_time=0 start_frame=7 end_frame=7 
          anim_frame=start_frame anim_cycle=1 new_phase=5
          attackCLOCK=critical_attackTIME+(round(5)*irandom_range(0,4))
          skip=1
        }
        if boss_state&lt;2
        {
          //set attack close animation state.
          anim_speed=30 anim_time=0 start_frame=7 end_frame=3
          anim_frame=start_frame anim_cycle=-1 new_phase=4
          skip=1
        }
    }
    
     //attack close
    if attack_phase=4
    {
       attackCLOCK=attackTIME+(round(10)*irandom_range(1,8))
       //set idle animation state.
       anim_speed=40 anim_time=0 start_frame=0 end_frame=2 
       anim_frame=0 anim_cycle=1 new_phase=1
       skip=1
    }    
    
    //jaw broken, stays open critical state.
    if attack_phase=5
    {
       if attackCLOCK&gt;0 {anim_time=0 anim_frame=start_frame skip=1}
       if attackCLOCK=0 
       {
          //set laser charge animation state.
          anim_speed=30 anim_time=0 start_frame=8 end_frame=10
          anim_frame=start_frame anim_cycle=1 new_phase=3
          skip=1
       }
    }    
    
  }
  //if we HAVE NOT reached the end of the animation.
  if anim_frame!=end_frame and skip=0 {anim_time=0 anim_frame+=anim_cycle}
}
//
if new_phase&gt;-1 {attack_phase=new_phase}
image_index=anim_frame

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pbullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vfxm=VFX_Manager,con=obj_gameplay_manager;
var p1=obj_player;

PlaySFX("player shot impact")
  //generate player projectile hitsparks.
  part_particles_create(global.Psystem, x, y, vfxm.particle_hitspark1, 10);
  part_particles_create(global.Psystem, x, y, vfxm.particle_hitspark2, 1);

hp-- damageCLOCK=round(room_speed/7)

with (other) 
{instance_destroy()}

if hp&lt;=0 and boss_state&lt;3
{
  boss_state++ hp=30
  if boss_state=2 and con.correct_match=0
  {hp=6400}
}

if boss_state=3
{
   //
   PlaySFX("boss explode")
   con.boss_defeatCLOCK=round(room_speed*4.5)
   if p1.shield&gt;0 {p1.shield=0 p1.recovery=room_speed*3}
   ShakeCamera(30,room_speed*1.2)
   part_particles_create(global.Psystem, x, y, vfxm.prt_boss_splat, 5); 
   part_particles_create(global.Psystem, x, y, vfxm.prt_boss_sploosh, 20); 
   part_particles_create(global.Psystem, x, y, vfxm.prt_jelly_ring, 5); 
   
   instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
